@model GameStore.Client.Models.GameViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}
    <div class="shadow-lg justify-content-center my-0 my-sm-4 container-style bg-light shadow-lg">
        <h2>Edit</h2>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-12 btn-group btn-group-toggle">
            <label class="col btn btn-primary">
                <input type="radio" name="imageRadio" autocomplete="off" data-target="#imageLinkInput" checked> Form link
            </label>
            <label class="col btn btn-primary active">
                <input type="radio" name="imageRadio" autocomplete="off" data-target="#imageFileInput"> From file
            </label>
        </div>

        <div id="imageLinkInput" class="form-group">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="imageFileInput" class="form-group collapse">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" id="imageFile" name="image" class="form-control" />
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Genre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select name="Genre" class="form-control">
                    @foreach (var item in ViewBag.Genres)
                    {
                        if (item == Model.Genre)
                        {
                            <option selected>@item</option>
                        }
                        else
                        {
                            <option>@item</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(model => model.Genre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Developer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select name="Developer" class="form-control">
                    @foreach (var item in ViewBag.Developers)
                    {
                        if (item == Model.Developer)
                        {
                            <option selected>@item</option>
                        }
                        else
                        {
                            <option>@item</option>
                        }
                    }
                </select>
                @Html.ValidationMessageFor(model => model.Developer, "", new { @class = "text-danger" })
            </div>

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
        }
        <script>
            let radiosImage = document.querySelectorAll('input[name="imageRadio"]');
            for (let item of radiosImage) {
                item.addEventListener('click', (e) => {
                    if (e.target.getAttribute('checked') != null) {
                        return;
                    }
                    for(let item of radiosImage) {
                        item.removeAttribute('checked');
                        document.querySelector(item.getAttribute('data-target')).classList.add('collapse');
                    };
                    e.target.setAttribute('checked', '');
                    let id = e.target.getAttribute('data-target');
                    document.querySelector(id).classList.remove('collapse');
                })
            }
        </script>
    </div>